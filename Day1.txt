1)Conditional statements - Flow of execution
	if, elseif, nested if, switch,...

	syntax: if
	if(condition){
	//code execution for condition
	}
	else
	{
	//code execution
	}
	
	
	syntax: elseif
	if (condition1) {
    // block of code to be executed if condition1 is true
    } else if (condition2) {
	// block of code to be executed if the condition1 is false and condition2 is true
	} else {
	// block of code to be executed if the condition1 is false and condition2 is false
    }
	
	switch(expression) {
	case x:
		// code block
		break;
	case y:
		// code block
	break;
	default:
		// code block
	}
	
	eg:
	import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a value for a: ");
        int a = scanner.nextInt();
        switch(a){
            case 1:
                System.out.println("Sun");
                break;
            case 2:
                System.out.println("Sat");
                break;
        }
       
    }
}


import java.util.Scanner;

public class Scholarship {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your mark");
          int mark = scanner.nextInt();
        System.out.println("Enter your family income");
        int income = scanner.nextInt();
        if(mark>=85 && income<=500000){
            System.out.println("You are eligible for Scholarship");
            
        }
        else
        {
            System.out.println("You are not eligible for Scholarship");
        }
    }
}
	syntax: nested if
	.
	.
	.
	
	
2)Looping Statements:
Execute a block of code multiple times as long as condition true

Types:
1. for loop -Entry controlled loop
The for loop is used when we know the number of iterations (we know how many times we want to repeat a task). The for statement consumes the initialization, condition, and increment/decrement in one line thereby providing a shorter, easy-to-debug structure of looping. 

Syntax:

for (initialization; condition; increment/decrement) {


    // code to be executed



}
Enchanced for loop (for each)
This loop is used to iterate over arrays or collections.

Syntax:

for (dataType variable : arrayOrCollection) {


    // code to be executed



}
2. while Loop - Entry checked
A while loop is used when we want to check the condition before running the code.

Syntax:

while (condition) {


    // code to be executed



}


3. do-while Loop - Exit controlled
The do-while loop in Java ensures that the code block executes at least once before the condition is checked.

Syntax:

do {


    // code to be executed


} while (condition);







3) ARRAYS IN JAVA

An array in java is a data structure that can store multiple values of the same type in a single variable, using a fixed-size memory block

Use: To store and manage colleections of date efficiently.
     Useful when the number of elements is fixed.
	 
Types of Arrays:

1)Single-dimensional Arrays: Linear collection of elements.
2)Multi-dimensional Arrays: Arrays of arrays, often used for matrices or grids.



class Main {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5};
        for(int i=0;i<arr.length;i++){
            System.out.println(i);
        }
        
    }
}



class Main {
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5};
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);//printing array values
        }
        
    }
}


class Main {
    public static void main(String[] args) {
        int sum = 0;
        int arr[]={1,4,5,8,9};
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
        }
        System.out.println(sum);
        
    }
}


class Main {
    public static void main(String[] args) {
        
        int arr[][]={{1,4,5,8,9},{11,12,13,14,15}};
        //System.out.println(arr.length);
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                System.out.println(arr[i][j]+"");
            }
        }
       
        
    }
}

import java.util.Scanner;
class Movie {
    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    System.out.println("Enter your age:");
    int age = scanner.nextInt();
    if(age<=12){
        System.out.println("Discount: 50%");
    }
    else if(age>=60){
        System.out.println("Discount is 30%");
    }
    else{
        System.out.println("No discount");
    }
    
    }
}




ARRAYS METHEODS AND OPERATIONS

Java Common Array Operations
Creating and Initializing Arrays. Syntax. dataType[] arrayName = new dataType[arraySize];
Iterating Over Arrays. Using a for Loop. int[] numbers = {10, 20, 30}; for (int i = 0; i < numbers. ...
Copying Arrays. Using System.arraycopy() ...
Sorting Arrays. Using Arrays.sort() ...
Searching Arrays. Using Arrays.
